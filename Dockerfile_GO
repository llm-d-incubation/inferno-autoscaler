# Dockerfile_GO: Minimal Go-only optimizer image
# 
# Use this for:
# - Go optimizer only (INFERNO_OPTIMIZER_TYPE=go)
# - Minimal footprint (~20MB)
# - Production deployments that don't need Python
#
# Build: docker build -f Dockerfile_GO -t your-registry/inferno:go .
#
# Build the manager binary
FROM docker.io/golang:1.23 AS builder
ARG TARGETOS
ARG TARGETARCH

WORKDIR /workspace
# Copy the Go Modules manifests
COPY go.mod go.mod
COPY go.sum go.sum
# cache deps before building and copying source so that we don't need to re-download as much
# and so that source changes don't invalidate our downloaded layer
RUN go mod download

# Copy the go source
COPY cmd/main.go cmd/main.go
COPY api/ api/
COPY internal/ internal/

# Build
# the GOARCH has not a default value to allow the binary be built according to the host where the command
# was called. For example, if we call make docker-build in a local env which has the Apple Silicon M1 SO
# the docker BUILDPLATFORM arg will be linux/arm64 when for Apple x86 it will be linux/amd64. Therefore,
# by leaving it empty we can ensure that the container and binary shipped on it will have the same platform.
RUN CGO_ENABLED=0 GOOS=${TARGETOS:-linux} GOARCH=${TARGETARCH} go build -a -o manager cmd/main.go

# Use distroless as minimal base image to package the manager binary (Go optimizer only)
# Refer to https://github.com/GoogleContainerTools/distroless for more details
FROM gcr.io/distroless/static:nonroot
WORKDIR /
COPY --from=builder /workspace/manager .
USER 65532:65532

# Set environment variables for Go optimizer (default)
ENV INFERNO_OPTIMIZER_TYPE=go
ENV INFERNO_WORKING_DIR=/tmp
ENV PROMETHEUS_BASE_URL=""
ENV GLOBAL_OPT_INTERVAL=60s
ENV GLOBAL_OPT_TRIGGER=false

ENTRYPOINT ["/manager"]