{{- if .Values.wva.va.enabled }}
{{- range .Values.variantAutoscaling.variants }}
---
apiVersion: llmd.ai/v1alpha1
# Optimizing a variant, create only when the model is deployed and serving traffic
# this is for the collector the collect existing (previous) running metrics of the variant.
# NOTE: In the new architecture, each accelerator type requires a separate VariantAutoscaling resource
kind: VariantAutoscaling
metadata:
  # Unique name of the variant - includes accelerator type for uniqueness
  name: {{ printf "%s-%s" $.Values.wva.modelName .accelerator | lower }}
  namespace: {{ $.Values.llmd.namespace }}
  labels:
    inference.optimization/acceleratorName: {{ .accelerator }}
# This is essentially static input to the optimizer
spec:
  # OpenAI API compatible name of the model
  modelID: {{ $.Values.variantAutoscaling.modelID | quote }}
  # Unique identifier for this variant: modelID-accelerator-accCount
  variantID: {{ printf "%s-%s-%d" $.Values.variantAutoscaling.modelID .accelerator (.acceleratorCount | default 1) }}
  # Accelerator type for this variant
  accelerator: {{ .accelerator }}
  # Number of accelerators per replica
  acceleratorCount: {{ .acceleratorCount | default 1 }}
  # Add SLOs in configmap, add reference to this per model data
  # to avoid duplication and Move to ISOs when available
  sloClassRef:
    # Configmap name to load in the same namespace as optimizer object
    # we start with static (non-changing) ConfigMaps (for ease of implementation only)
    name: premium-slo
    # Key (modelID) present inside configmap
    key: opt-125m
  # Static profiled benchmarked data for this variant
  variantProfile:
    perfParms:
      decodeParms:
        # Decode parameters for ITL equation: itl = alpha + beta * maxBatchSize
        alpha: {{ .perfParms.decodeParms.alpha | quote }}
        beta: {{ .perfParms.decodeParms.beta | quote }}
      # Prefill parameters for TTFT equation: ttft = gamma + delta * tokens * maxBatchSize
      prefillParms:
        gamma: {{ .perfParms.prefillParms.gamma | quote }}
        delta: {{ .perfParms.prefillParms.delta | quote }}
    maxBatchSize: {{ .maxBatchSize | default 512 }}
{{- end }}
{{- end }}